#!/usr/bin/env bash

set -euo pipefail
shopt -s extglob

ksol_script="$0"
while [[ -h "$ksol_script" ]]; do
    ksol_dir="$(cd -P "$(dirname "$ksol_script")" && pwd)"
    ksol_script="$(readlink "$ksol_script")"
    [[ "$ksol_script" != /* ]] && ksol_script="$ksol_dir/$ksol_script"
done
ksol_dir="$(cd -P "$(dirname "$ksol_script")" && pwd)"

build_dir="$ksol_dir/.build"
release_dir="$build_dir/k/k-distribution/target/release/k"
defn_dir="$build_dir/defn"

export PATH="$release_dir/lib/native/linux:$release_dir/lib/native/linux64:$release_dir/bin/:$PATH"

test_logs="$build_dir/logs"
test_log="$test_logs/tests.log"
mkdir -p "$test_logs"

# Utilities
# ---------

progress() { echo "== $@" >&2 ; }
die()      { echo -e "FATAL:" "$@" >&2 ; exit 1 ; }

pretty_diff() {
    git --no-pager diff --no-index "$@"
}

# Runners
# -------

run_krun() {
    local run_file

    run_file="$1" ; shift

    export K_OPTS=-Xss500m
    krun --directory "$backend_dir" "$run_file" "$@"
}

run_test() {
    local test_file expected_file output_file

    test_file="$1" ; shift

    test_log_name="$test_logs/$test_file"
    mkdir -p "$(dirname "$test_log_name")"

    output_file="$test_log_name.out"

    if [[ -f "$test_file.out" ]]; then
        expected_file="$test_file.out"
    else
        expected_file="tests/success-$backend.out"
    fi

    [[ -f "$expected_file" ]] \
        || die "Expected output file '$expected_file' does not exist..."

    run_krun "$test_file" > "$output_file"
    pretty_diff "$expected_file" "$output_file"
}

run_test_profile() {
    local test_file exit_status
    local output_log_dir stdout_log stderr_log

    test_file="$1" ; shift

    output_log_dir="$test_logs/$(dirname -- "$test_file")"
    stdout_log="$test_logs/$test_file.stdout"
    stderr_log="$test_logs/$test_file.stderr"
    [[ -d "$output_log_dir" ]] || mkdir -p "$output_log_dir"

    exit_status='0'
    `which time` --quiet --format '%x %es %Us %Ss %MKB %C' --output "$test_log" --append \
        bash -c "$0 --backend "$backend" test $test_file $@" \
        1> "$stdout_log" 2> "$stderr_log" \
        || exit_status="$?"

    if [[ "$exit_status" == '0' ]]; then
        progress "passed test: $test_file"
    else
        die "failed test: $test_file"
    fi

    exit "$exit_status"
}

# Main
# ----

cd "$(dirname $0)"

# main functionality
run_command="$1" ; shift

backend="java"
if [[ $# -gt 0 ]] && [[ $1 == '--backend' ]]; then
    backend="$2"
    shift 2
fi
backend_dir="$defn_dir/$backend"
[[ ! "$backend" == "ocaml" ]] || eval $(opam config env)

case "$run_command-$backend" in

    # Running
    run-@(ocaml|java) ) run_krun "$@" ;;

    test-@(ocaml|java)         ) run_test         "$@" ;;
    test-profile-@(ocaml|java) ) run_test_profile "$@" ;;

    *) echo "
    usage: $0 (run|test|test-profile) [--backend (ocaml|java)] <pgm> <K args>*

       $0 run          : Run a single WASM program
       $0 test         : Run a single WASM program like it's a test
       $0 test-profile : Additionally record timing and memory usage to '${test_log#$(pwd)/}'

       Note: <pgm> is a path to a file containing a WASM program.
             <K args> are any arguments you want to pass to K when executing/proving.
" ; exit ;;
esac
